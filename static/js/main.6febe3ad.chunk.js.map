{"version":3,"sources":["bandagram/shuffle.ts","bandagram/letters/hintLetter.tsx","bandagram/letters/stringToCharList.ts","bandagram/letters/generateActiveRow.tsx","bandagram/letters/generateGuessRow.tsx","bandagram/letters/compareStrings.ts","bandagram/dayNumber.ts","bandagram/Finished.tsx","bandagram/bandagram.tsx","bandagram/letters/randomString.ts","bandagram/data/properlengthbands.ts","bandagram/Practice.tsx","bandagram/data/dailyquiz.ts","bandagram/DailyQuiz.tsx","bandagram/data/mulberryrandom.ts","App.tsx","reportWebVitals.js","index.js"],"names":["shuffle","array","random","randomIndex","currentIndex","length","Math","floor","LetterCard","styled","Card","_templateObject","_taggedTemplateLiteral","HintLetter","_ref","letter","backgroundColor","onClick","textColor","undefined","React","createElement","style","color","stringToCharList","str","toLowerCase","split","filter","char","generateActiveRow","input","letters","onLetterClick","Fragment","remainingLetters","map","guessed","includes","index","findIndex","c","splice","evaluateLetters","key","guessStatusOfLetters","guess","correctAnswer","fakeLetters","guessLetter","notWrong","correct","wrong","compareStrings","str1","str2","replace","trim","dayNumber","today","Date","firstDay","diff","abs","getTime","CenterPage","div","Finished","guesses","playAgain","Typography","variant","Button","navigator","clipboard","writeText","shareText","mojis","_ref2","join","concat","Row","Page","_templateObject2","Bandagram","initMissingLetters","initFakeLetters","onMakeGuess","text","setText","useState","missingLetters","max","noFakeLetters","ceil","correctLetters","useMemo","slice","allFakeLetters","possible","i","charAt","randomString","allLetters","onGuess","event","preventDefault","gameOver","generateGuessRow","align","sx","fontSize","onSubmit","Input","maxWidth","width","value","onChange","target","type","bandNames","Practice","answer","setAnswer","setGuesses","DailyQuiz","a","t","imul","answerOfTheDay","cookies","Cookies","path","blob","setBlob","cookie","get","toDateString","date","set","guessesOfTheDay","TabsEnum","App","setValue","className","Tabs","Tab","label","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AI,CAAAtB,EAAgCyB,KAAU,IAAzCU,YAACA,EAAWE,QAAEA,EAAOC,MAAEA,GAAMtC,EACnG,MAAME,EAAkBmC,EAAU,QAAUC,EAAQ,WAAQjC,EAC5D,OAAOC,IAAAC,cAACR,EAAU,CAACE,OAAQkC,EAAajC,gBAAiBA,EAAiB4B,IAAKL,OI+BtEqE,CAAiB9D,EAAOC,EAAeC,KAG3C2D,EACEvF,IAAAC,cAAC8C,EAAQ,CAACpB,cAAeA,EAAeqB,QAASA,EAASC,UAAWA,IACrEjD,IAAAC,cAAAD,IAAAc,SAAA,KACCd,IAAAC,cAACiD,IAAU,CAACC,QAAQ,QAAQsC,MAAM,SAASC,GAAI,CAACC,SAAU,KAAK,oBAC3CpB,EAAe,kBAAgBE,GAEnDzE,IAAAC,cAAC4D,EAAG,KACDnD,EAAkB0D,EAAMe,EAnBdxF,IACrB0E,EAAQD,EAAOzE,MAoBPK,IAAAC,cAAA,QAAM2F,SAAUR,GACdpF,IAAAC,cAAC4F,IAAK,CAAC3F,MAAO,CAAC4F,SAAU,IAAKC,MAAO,QAASC,MAAO5B,EAAM6B,SAAWZ,GAAUhB,EAAQgB,EAAMa,OAAOF,SACrGhG,IAAAC,cAACmD,IAAM,CAAC+C,KAAK,SAAStG,QAASuF,GAAS,aE/EzCgB,EAAY,CACvB,YACA,cACA,eACA,aACA,WACA,aACA,YACA,YACA,eACA,UACA,cACA,eACA,cACA,eACA,cACA,cACA,UACA,YACA,aACA,WACA,UACA,cACA,YACA,WACA,YACA,WACA,cACA,cACA,iBACA,eACA,eACA,UACA,eACA,eACA,WACA,WACA,eACA,aACA,YACA,aACA,WACA,YACA,cACA,aACA,UACA,UACA,eACA,cACA,aACA,cACA,cACA,eACA,WACA,eACA,eACA,UACA,WACA,aACA,aACA,UACA,UACA,eACA,UACA,WACA,eACA,YACA,aACA,eACA,YACA,WACA,eACA,eACA,WACA,aACA,aACA,eACA,YACA,cACA,gBACA,eACA,YACA,eACA,cACA,YACA,aACA,cACA,eACA,cACA,YACA,aACA,WACA,aACA,aACA,aACA,cACA,eACA,cACA,cACA,UACA,cACA,eACA,cACA,UACA,aACA,eACA,gBACA,YACA,gBACA,cACA,eACA,UACA,UACA,kBACA,aACA,YACA,cACA,cACA,cACA,cACA,WACA,aACA,cACA,YACA,aACA,aACA,WACA,eACA,YACA,UACA,WACA,WACA,cACA,gBACA,UACA,cACA,eACA,aACA,UACA,YACA,WACA,YACA,YACA,aACA,aACA,YACA,eACA,WACA,WACA,eACA,aACA,aACA,eACA,aACA,WACA,UACA,cACA,YACA,eACA,aACA,aACA,eACA,eACA,eACA,cACA,aACA,gBACA,aACA,WACA,aACA,YACA,eACA,gBACA,YACA,WACA,cACA,cACA,cACA,aACA,WACA,WACA,UACA,YACA,YACA,eACA,UACA,eACA,eACA,cACA,cACA,aACA,eACA,WACA,YACA,cACA,cACA,aACA,aACA,YACA,WACA,WACA,cACA,cACA,eACA,cACA,aACA,aACA,WACA,cACA,aACA,cACA,eACA,UACA,aACA,eACA,WACA,YACA,gBACA,YACA,eACA,WACA,aACA,WACA,eACA,cACA,YACA,aACA,cACA,cACA,cACA,WACA,cACA,YACA,cACA,eACA,cACA,eACA,kBACA,oBACA,gBACA,WACA,aACA,YACA,eACA,WACA,WACA,eACA,cACA,UACA,aACA,eACA,eACA,aACA,YACA,aACA,cACA,aACA,cACA,UACA,aACA,cACA,WACA,YACA,eACA,UACA,WACA,aACA,eACA,aACA,cACA,eACA,YACA,eACA,WACA,YACA,eACA,WACA,cACA,YACA,YACA,YACA,WACA,eACA,YACA,gBACA,gBACA,YACA,YACA,cACA,aACA,aACA,YACA,cACA,YACA,YACA,aACA,cACA,UACA,cACA,eACA,YACA,YACA,YACA,cACA,UACA,WACA,eACA,aACA,aACA,gBACA,gBCnTWC,EAAWA,KACtB,MAAOC,EAAQC,GAAajC,mBAAS8B,EAAUlH,KAAKC,MAAMD,KAAKJ,SAAWsH,EAAUnH,WAC7E+D,EAASwD,GAAclC,mBAAmB,IASjD,OACEtE,IAAAC,cAAC+D,EAAS,CACRrC,cAAe2E,EACfrC,mBAAoB,EACpBC,gBAAiB,EACjBpF,OAAQI,KAAKJ,OACbkE,QAASA,EACTmB,YAfiBzC,IACnB8E,EAAW,IAAIxD,EAAStB,KAetBuB,UAbcA,KAChBsD,EAAUH,EAAUlH,KAAKC,MAAMD,KAAKJ,SAAWsH,EAAUnH,UACzDuH,EAAW,QCXFJ,EAAY,CACvB,WACA,gBACA,WACA,aACA,cACA,eACA,aACA,cACA,eACA,cACA,eACA,aACA,eACA,aACA,aACA,WACA,eACA,YACA,eACA,cACA,eACA,YACA,cACA,YACA,aACA,eACA,oBACA,aACA,UACA,UACA,YACA,cACA,UACA,aACA,aACA,aACA,cACA,eACA,cACA,YACA,eACA,YACA,aACA,cACA,cACA,UACA,YACA,WACA,YACA,WACA,eACA,cACA,eACA,aACA,YACA,eACA,aACA,eACA,eACA,YACA,eACA,cACA,kBACA,cACA,eACA,UACA,YACA,cACA,YACA,WACA,WACA,cACA,eACA,cACA,UACA,YACA,WACA,eACA,eACA,WACA,cACA,WACA,eACA,YACA,YACA,WACA,WACA,WACA,aACA,gBACA,aACA,YACA,WACA,eACA,eACA,eACA,cACA,YACA,WACA,YACA,cACA,aACA,YACA,aACA,UACA,aACA,aACA,eACA,gBACA,eACA,aACA,UACA,aACA,cACA,eACA,WACA,iBACA,aACA,YACA,aACA,cACA,eACA,WACA,aACA,UACA,UACA,WACA,eACA,cACA,aACA,gBACA,YACA,eACA,eACA,WACA,YACA,cACA,UACA,aACA,eACA,aACA,cACA,aACA,eACA,WACA,gBACA,cACA,eACA,YACA,YACA,gBACA,YACA,cACA,cACA,eACA,cACA,cACA,aACA,YACA,WACA,cACA,WACA,WACA,aACA,YACA,cACA,eACA,UACA,UACA,UACA,aACA,eACA,eACA,aACA,YACA,aACA,aACA,YACA,WACA,cACA,eACA,WACA,aACA,eACA,cACA,eACA,YACA,YACA,cACA,eACA,YACA,aACA,eACA,gBACA,cACA,aACA,YACA,aACA,aACA,WACA,aACA,UACA,WACA,WACA,eACA,YACA,WACA,aACA,cACA,gBACA,WACA,YACA,WACA,cACA,YACA,aACA,WACA,UACA,YACA,WACA,cACA,cACA,YACA,cACA,eACA,aACA,YACA,cACA,cACA,gBACA,cACA,aACA,UACA,WACA,cACA,UACA,eACA,aACA,eACA,aACA,UACA,WACA,cACA,UACA,cACA,WACA,eACA,YACA,eACA,eACA,aACA,cACA,YACA,aACA,gBACA,eACA,cACA,YACA,WACA,UACA,aACA,eACA,aACA,aACA,eACA,aACA,UACA,YACA,YACA,cACA,cACA,gBACA,cACA,eACA,aACA,YACA,eACA,kBACA,aACA,cACA,aACA,WACA,cACA,cACA,cACA,UACA,cACA,YACA,WACA,cACA,YACA,UACA,cACA,cACA,YACA,WACA,UACA,WACA,cACA,eACA,eACA,aACA,cACA,eACA,YACA,eACA,WACA,eACA,YACA,uBC/SK,MAAMK,EAAYA,KACvB,MAAM9E,cAACA,EAAa7C,OAAEA,GAAU8F,kBAAQ,KAyB1C,WACE,MAAMzD,EAAQmB,IAAc8D,EAAUnH,OAChCH,GChCmB4H,EDgCCvF,EC/BnB,WACL,IAAIwF,EAAID,GAAK,WAGb,OAFAC,EAAIzH,KAAK0H,KAAKD,EAAKA,IAAM,GAAS,EAAJA,MAC9BA,GAAKA,EAAIzH,KAAK0H,KAAKD,EAAKA,IAAM,EAAQ,GAAJA,IACpBA,IAAM,MAAS,GAAK,aAL/B,IAAoBD,EDiCzB,MAAO,CAAC/E,cAAeyE,EAAUjF,GAAQrC,WA3BhC+H,GACN,IACGC,EAAU,IAAIC,IAAQ,aAAc,CAAEC,KAAM,OAC3CC,EAAMC,GAAW5C,oBAAS,GAC3BtB,EA0BR,SAAyB8D,GACvB,MAAMK,EAAqBL,EAAQM,IAAI,cACjC7E,GAAS,IAAIC,MAAQ6E,eAC3B,OAAU,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQG,QAAS/E,EACZ4E,EAAOnE,SAEd8D,EAAQS,IAAI,aAAc,CAACD,KAAM/E,EAAOS,QAAS,IAAK,CAACgE,KAAM,MACtD,IAjCOQ,CAAgBV,GAKhC,OACE9G,IAAAC,cAAAD,IAAAc,SAAA,KACEd,IAAAC,cAAA,UAAI,cAAYqC,KAChBtC,IAAAC,cAAC+D,EAAS,CACRrC,cAAeA,EACfsC,mBAAoB,EACpBC,gBAAiB,EACjBpF,OAAQA,EACRkE,QAASA,EACTmB,YAbezC,IACnBoF,EAAQS,IAAI,aAAc,IAAIT,EAAQM,IAAI,cAAepE,QAAS,IAAIA,EAAStB,IAAS,CAACsF,KAAM,MAC/FE,GAASD,cEVb,MAAMpE,EAAaxD,IAAOyD,IAAGvD,MAAAC,YAAA,+FAK3B,IAEGiI,EAAQ,SAARA,GAAQ,OAARA,EAAQ,sBAARA,EAAQ,oBAARA,EAAQ,CAARA,GAAQ,IA2BEC,MAtBf,WACE,MAAO1B,EAAO2B,GAAY3H,IAAMsE,SAASmD,EAAShB,WAElD,OACEzG,IAAAC,cAAC4C,EAAU,CAAC+E,UAAU,OAEpB5H,IAAAC,cAAC4H,IAAI,CAAC7B,MAAOA,GACXhG,IAAAC,cAAC6H,IAAG,CAACC,MAAM,YAAY/B,MAAOyB,EAAShB,UAAW5G,QAASA,IAAM8H,EAASF,EAAShB,aACnFzG,IAAAC,cAAC6H,IAAG,CAACC,MAAM,WAAW/B,MAAOyB,EAASpB,SAAUxG,QAASA,IAAM8H,EAASF,EAASpB,aAElFL,IAAUyB,EAASpB,UAElBrG,IAAAC,cAACoG,EAAQ,MAEVL,IAAUyB,EAAShB,WAClBzG,IAAAC,cAACwG,EAAS,QCtBHuB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK3I,IAAiD,IAAhD6I,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASjJ,EACpE6I,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDdW,IAASC,OACP7I,IAAAC,cAACD,IAAM8I,WAAU,KACf9I,IAAAC,cAACyH,EAAG,OAENqB,SAASC,eAAe,SAM1BhB","file":"static/js/main.6febe3ad.chunk.js","sourcesContent":["export function shuffle<T>(array: T[], random: () => number): T[] {\n  let currentIndex = array.length,  randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n\n    // Pick a remaining element.\n    randomIndex = Math.floor(random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}","import {Card} from \"@mui/material\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\n\ninterface Props {\n  letter: string;\n  backgroundColor?: string;\n  onClick?(): void;\n}\n\nconst LetterCard = styled(Card)`\n  width: 25px;\n  height: 25px;\n  font-size: 15px;\n  font-weight: bold;\n  text-transform: uppercase;\n  display: inline-block;\n  margin: 3px;\n`\n\nexport const HintLetter = ({letter, backgroundColor, onClick}: Props): React.JSX.Element => {\n  const textColor = backgroundColor ? \"white\" : undefined;\n  return (<LetterCard style={{backgroundColor: backgroundColor, color: textColor}} onClick={onClick}>{letter}</LetterCard>);\n}","export function stringToCharList(str: string): string[] {\n  return str.toLowerCase()\n    .split(\"\")\n    .filter((char) => char !== \" \")\n}","import {HintLetter} from \"./hintLetter\";\nimport React from \"react\";\nimport {stringToCharList} from \"./stringToCharList\";\n\nexport function evaluateLetters(input: string, letters: string[]) {\n  let remainingLetters: string[] = stringToCharList(input);\n  return letters.map(letter => {\n    const guessed = remainingLetters.includes(letter);\n    if (guessed) {\n      const index = remainingLetters.findIndex((c) => c === letter)\n      remainingLetters.splice(index, 1)\n    }\n    return { letter, guessed };\n  });\n}\nexport function generateActiveRow(input: string, letters: string[], onLetterClick: (letter: string) => void) {\n  return (<>{evaluateLetters(input, letters).map(({letter, guessed}, index) => {\n    const backgroundColor = guessed ? \"orange\" :  undefined;\n    return <HintLetter letter={letter} backgroundColor={backgroundColor} key={index} onClick={() => onLetterClick(letter)} />;\n  })}</>);\n}","import {HintLetter} from \"./hintLetter\";\nimport React from \"react\";\nimport {stringToCharList} from \"./stringToCharList\";\n\nexport interface GuessStatus {\n  guessLetter: string;\n  correct: boolean;\n  wrong: boolean;\n}\n\nexport function guessStatusOfLetters(guess: string, correctAnswer: string, fakeLetters: string[]): GuessStatus[] {\n  const letters = stringToCharList(correctAnswer);\n  let remainingLetters: string[] = [...letters, ...fakeLetters];\n  return stringToCharList(guess).map((guessLetter, index) => {\n    const notWrong = remainingLetters.includes(guessLetter);\n    if (notWrong) {\n      const index = remainingLetters.findIndex((c) => c === guessLetter)\n      remainingLetters.splice(index, 1)\n    }\n    const guessed = guessLetter === letters[index];\n    return { guessLetter, correct: guessed , wrong: !notWrong};\n  });\n}\n\n/**\n * Generates a row of letters with the correct letters highlighted in green and the letters not included in answer in red.\n *\n * todo: when you use multiple of a letter and a later one is green, the earlier ones should maybe be red?\n * @param guess\n * @param correctAnswer\n * @param fakeLetters\n */\nexport function generateGuessRow(guess: string, correctAnswer: string, fakeLetters: string[]) {\n  return (<>{guessStatusOfLetters(guess, correctAnswer, fakeLetters).map(({guessLetter, correct, wrong}, index) => {\n    const backgroundColor = correct ? \"green\" : wrong ? \"red\" : undefined;\n    return <HintLetter letter={guessLetter} backgroundColor={backgroundColor} key={index} />;\n  })}</>);\n}\n","export function compareStrings(str1: string, str2:string): boolean {\n  //add more whitespace?\n  return str1.toLowerCase().replace(' ', '').trim() === str2.toLowerCase().replace(' ', '').trim();\n}","export function dayNumber() {\n  const today = new Date();\n  const firstDay = new Date(2023, 10, 18);\n  const diff = Math.abs(today.getTime() - firstDay.getTime())/ (1000 * 60 * 60 * 24);\n  return Math.floor(diff);\n}","import {Button, Typography} from \"@mui/material\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport {compareStrings} from \"./letters/compareStrings\";\nimport {guessStatusOfLetters} from \"./letters/generateGuessRow\";\nimport {dayNumber} from \"./dayNumber\";\n\nconst CenterPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\ninterface Props {\n  correctAnswer: string;\n  guesses: string[];\n  playAgain?(): void;\n}\n//TODO gör en share knapp (bara för daily quiz?)\nexport const Finished = ({correctAnswer, guesses, playAgain}: Props) => {\n  const correct =  compareStrings(guesses[guesses.length - 1], correctAnswer);\n  return (\n    <CenterPage>\n      {correct ? (\n        <>\n          <Typography variant=\"body1\"> {correctAnswer}</Typography>\n          <h1>Good job!</h1>\n        </>\n    ) : (\n      <>\n        <Typography variant=\"body1\"> {correctAnswer}</Typography>\n        <h1>So close! Better luck next time...</h1>\n      </>\n    )}\n    {playAgain && (\n      <Button onClick={playAgain} variant=\"contained\">Play again</Button>\n    )}\n    {!playAgain && (\n      <Button\n        onClick={() => {navigator.clipboard.writeText(shareText(guesses, correctAnswer))}}\n        variant=\"contained\"\n      >Share!</Button>\n    )}\n    </CenterPage>\n  );\n};\n\nconst shareText = (guesses: string[], correctAnswer: string): string => {\n\n  const mojis = guesses.map(guess => {\n    return guessStatusOfLetters(guess, correctAnswer, []).map(({guessLetter, correct, wrong}, index) => {\n      if (correct) {\n        return '🟢';\n      } else if (wrong) {\n        return '🔴';\n      } else {\n        return '⚪';\n      }\n    }).join('');\n  }).join('\\n');\n  return `I finished Bandagram #${dayNumber()}\\n${mojis}`;\n}","import React, {FormEvent, useMemo} from 'react';\nimport {shuffle} from \"./shuffle\";\nimport styled from \"@emotion/styled\";\nimport {Button, Input, Typography} from \"@mui/material\";\nimport {generateActiveRow} from \"./letters/generateActiveRow\";\nimport {stringToCharList} from \"./letters/stringToCharList\";\nimport {generateGuessRow} from \"./letters/generateGuessRow\";\nimport {compareStrings} from \"./letters/compareStrings\";\nimport {randomString} from \"./letters/randomString\";\nimport {Finished} from \"./Finished\";\n\nconst Row = styled.div`\n  display: inline-block;\n`;\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: flex-start;\n`;\n\ninterface Props {\n  correctAnswer: string;\n  initMissingLetters: number;\n  initFakeLetters: number;\n  random: () => number;\n  guesses: string[];\n  onMakeGuess: (guess: string) => void;\n  playAgain?(): void;\n}\n\nexport const Bandagram = ({correctAnswer, initMissingLetters, initFakeLetters, random, guesses, onMakeGuess, playAgain}: Props) => {\n  const [text, setText] = React.useState('');\n  const missingLetters = Math.max(initMissingLetters - Math.floor(guesses.length/2), 0)\n  const noFakeLetters = Math.max(initFakeLetters - Math.ceil(guesses.length/2), 0)\n\n  //Overusing useMemo to avoid activeRow re-renders when typing\n  const correctLetters = useMemo((): string[] => {\n    return shuffle(stringToCharList(correctAnswer.toLowerCase()), random);\n  }, [correctAnswer, random])\n  const letters = useMemo(() => {\n    return missingLetters > 0 ? correctLetters.slice(0, -missingLetters) : correctLetters\n  }, [missingLetters, correctLetters]);\n  const allFakeLetters = useMemo((): string[] => {\n    return stringToCharList(randomString(initFakeLetters, random));\n  }, [initFakeLetters, random])\n  const fakeLetters = useMemo(() => {\n    return allFakeLetters.slice(0, noFakeLetters);\n  }, [noFakeLetters, allFakeLetters]);\n  const allLetters = useMemo(() => {\n    return shuffle([...letters, ...fakeLetters], random);\n  }, [letters, fakeLetters, random]);\n  const onGuess = (event: FormEvent) => {\n    event.preventDefault()\n    onMakeGuess(text)\n    setText('')\n  }\n  const onLetterClick = (letter: string) => {\n    setText(text + letter)\n  };\n  const gameOver = (guesses.length && compareStrings(guesses[guesses.length - 1], correctAnswer)) || guesses.length > 5;\n\n  return (\n      <Page >\n        {guesses.map((guess, i) => {\n          return (<Row key={i}>\n            {generateGuessRow(guess, correctAnswer, fakeLetters)}\n          </Row>)\n        })}\n        {gameOver ?\n          (<Finished correctAnswer={correctAnswer} guesses={guesses} playAgain={playAgain}/>) :\n          (<>\n            <Typography variant=\"body2\" align=\"center\" sx={{fontSize: 12}}>\n              Missing letters: {missingLetters} Fake letters: {noFakeLetters}\n            </Typography>\n            <Row>\n              {generateActiveRow(text, allLetters, onLetterClick)}\n            </Row>\n            <form onSubmit={onGuess}>\n              <Input style={{maxWidth: 300, width: '100%'}} value={text} onChange={(event) => setText(event.target.value)} />\n              <Button type=\"submit\" onClick={onGuess}>Guess</Button>\n            </form>\n          </>)\n        }\n      </Page>\n  );\n}","export function randomString(length: number, random: () => number): string {\n  let text = \"\";\n  //Letters appearing according to how common they are in dailyquiz.ts\n  const possible = \"AAAAABBCCCDDDEEEEEFFGGHHHIIIIJJKKLLLLMMMNNNNOOOOPPQRRRRSSSSTTTTUUVWWXYYZÅÄÖ\";\n\n  for (let i = 0; i < length; i++)\n    text += possible.charAt(Math.floor(random() * possible.length));\n\n  return text;\n}","//Band från quizzen på mellan 7 och 11 bokstäver\nexport const bandNames = [\n  'Lady Gaga',\n  'Miley Cyrus',\n  'Taylor Swift',\n  'Ed Sheeran',\n  'No Doubt',\n  'Elton John',\n  'Green Day',\n  'Icona Pop',\n  'Lana Del Rey',\n  'Nirvana',\n  'The Beatles',\n  'Alice Cooper',\n  'David Bowie',\n  'Harry Styles',\n  'Johnny Cash',\n  'Linkin Park',\n  'Madonna',\n  'Manu Chao',\n  'Nickelback',\n  'YUNGBLUD',\n  'A*Teens',\n  'Ace of Base',\n  'Aerosmith',\n  'Bee Gees',\n  'blink-182',\n  'Bon Jovi',\n  'Bright Eyes',\n  'Bryan Adams',\n  'Céline Dion',\n  'Dire Straits',\n  'Ebba Grön',\n  'Erasure',\n  'Eric Clapton',\n  'Foo Fighters',\n  'Gorillaz',\n  'Imperiet',\n  'Jan Johansen',\n  'Juice WRLD',\n  'Lambretta',\n  'Lily Allen',\n  'Maskinen',\n  'Meat Loaf',\n  'Patti Smith',\n  'Paul Simon',\n  'Ramones',\n  'Shakira',\n  'Shawn Mendes',\n  'Tenacious D',\n  'The Police',\n  'Tina Turner',\n  'Tomas Ledin',\n  'Zara Larsson',\n  '24kGoldn',\n  'Aaron Carter',\n  'Adam Lambert',\n  'Afroman',\n  'Ansiktet',\n  'Arvingarna',\n  'Billy Joel',\n  'Blondie',\n  'Bolaget',\n  'Bonnie Tyler',\n  'Caesars',\n  'Coldplay',\n  'Daddy Yankee',\n  'Daft Punk',\n  'Diana Ross',\n  'Die Antwoord',\n  'Disturbed',\n  'Doja Cat',\n  'Dolly Parton',\n  'Donna Summer',\n  'Dua Lipa',\n  'Eurythmics',\n  'Faith Hill',\n  'Fall Out Boy',\n  'Far & Son',\n  'Fatboy Slim',\n  'First Aid Kit',\n  'Fools Garden',\n  'Glee Cast',\n  'Guns N Roses',\n  'Iggy Azalea',\n  'In Flames',\n  'Irene Cara',\n  'Iron Maiden',\n  'Jeff Buckley',\n  'John Lennon',\n  'Kate Bush',\n  'Katy Perry',\n  'Kid Rock',\n  'Kim Carnes',\n  'Lasse Holm',\n  'Lazlo Bane',\n  'LeAnn Rimes',\n  'Led Zeppelin',\n  'Limp Bizkit',\n  'Lisa Ekdahl',\n  'Madness',\n  'Melody Club',\n  'Neil Diamond',\n  'Nicki Minaj',\n  'Outkast',\n  'Papa Roach',\n  'Peps Persson',\n  'Pet Shop Boys',\n  'Radiohead',\n  'Reel Big Fish',\n  'Rick Astley',\n  'Ricky Martin',\n  'Rihanna',\n  'Roxette',\n  'Run–D.M.C.',\n  'Ryan Adams',\n  'September',\n  'Sex Pistols',\n  'Simple Plan',\n  'Smash Mouth',\n  'Snow Patrol',\n  'Survivor',\n  'Teddybears',\n  'The Killers',\n  'The Kooks',\n  'The Rasmus',\n  'The Weeknd',\n  'Timbuktu',\n  'Van Morrison',\n  'Vance Joy',\n  'Volbeat',\n  'Westlife',\n  'Young MC',\n  '2 Unlimited',\n  '4 Non Blondes',\n  'Aaliyah',\n  'Adam Tensta',\n  'Alessia Cara',\n  'All Saints',\n  'America',\n  'Anastacia',\n  'Ane Brun',\n  'Anna Book',\n  'Anti-Flag',\n  'Architects',\n  'AWOLNATION',\n  'B*Witched',\n  'Bad Religion',\n  'Barbados',\n  'Bastille',\n  'Beastie Boys',\n  'Beyoncé',\n  'Billy Paul',\n  'Billy Talent',\n  'Bruno Mars',\n  'Caramell',\n  'Cascada',\n  'Chuck Berry',\n  'Clara Mae',\n  'Clean Bandit',\n  'Cornershop',\n  'Crazy Town',\n  'Cutting Crew',\n  'Cyndi Lauper',\n  'Cypress Hill',\n  'Def Leppard',\n  'Del Amitri',\n  'Docent Död',\n  'Don McLean',\n  'Don Omar',\n  'Drömhus',\n  'Echosmith',\n  'Eddie Murphy',\n  'Édith Piaf',\n  'Eiffel 65',\n  'Eldkvarn',\n  'Elov & Beny',\n  'Emma Bunton',\n  'Eric Carmen',\n  'Eric Saade',\n  'Familjen',\n  'Flo Rida',\n  'Flobots',\n  'Foreigner',\n  'Freestyle',\n  'Frej Larsson',\n  'Friends',\n  'Gary Portnoy',\n  'Gavin DeGraw',\n  'George Ezra',\n  'Girls Aloud',\n  'Günther',\n  'Gwen Stefani',\n  'Haddaway',\n  'Halestorm',\n  'Hans Zimmer',\n  'Hilary Duff',\n  'Hoobastank',\n  'Hugh Grant',\n  'iann dior',\n  'Ice Cube',\n  'Iggy Pop',\n  'Imogen Heap',\n  'Iron & Wine',\n  'Jace Everett',\n  'James Blunt',\n  'Jason Mraz',\n  'Jean Stout',\n  'Jessie J',\n  'Jimmy Cliff',\n  'Joe Cocker',\n  'John Denver',\n  'John Farnham',\n  'Journey',\n  'Kanye West',\n  'Keala Settle',\n  'Kid Cudi',\n  'Kim Wilde',\n  'Kings of Leon',\n  'Lil Wayne',\n  'Lisa Nilsson',\n  'Lou Reed',\n  'Luis Fonsi',\n  'Lykke Li',\n  'Magnum Bonum',\n  'Måneskin',\n  'Marc Cohn',\n  'Maria Mena',\n  'Mark Ronson',\n  'Marvin Gaye',\n  'Masked Wolf',\n  'Mattafix',\n  'Men At Work',\n  'Metallica',\n  'MexicoFALLZ',\n  'Midnight Oil',\n  'Millencolin',\n  'Modest Mouse',\n  'Molly Sandén',\n  'Mötley Crüe',\n  'Nat King Cole',\n  'Nazareth',\n  'Nick Jonas',\n  'Nine Days',\n  'Norlie & KKV',\n  'Owl City',\n  'Paramore',\n  'Paris Hilton',\n  'Pat Benatar',\n  'Peaches',\n  'Per Gessle',\n  'Peter LeMarc',\n  'Phil Collins',\n  'Quinn XCII',\n  'Rammstein',\n  'Robin Cook',\n  'Rod Stewart',\n  'Roffe Ruff',\n  'Roy Orbison',\n  'Sabaton',\n  'Säkert!',\n  'Salt-N-Pepa',\n  'Saweetie',\n  'Scorpions',\n  'Shania Twain',\n  'Shebang',\n  'Sheppard',\n  'Snoop Dogg',\n  'Sonny & Cher',\n  'Soulja Boy',\n  'Spice Girls',\n  'Stevie Nicks',\n  'Sugarcult',\n  'Suzanne Vega',\n  't.A.T.u.',\n  'Take That',\n  'Taylor Dayne',\n  'The 1975',\n  'The Animals',\n  'The Clash',\n  'The Coral',\n  'The Corrs',\n  'The Cure',\n  'The Darkness',\n  'The Hives',\n  'The Jackson 5',\n  'The Kid LAROI',\n  'The Kinks',\n  'The Knack',\n  'The Pierces',\n  'The Script',\n  'The Sounds',\n  'The Verve',\n  'The Wombats',\n  'Tom Jones',\n  'Tom Petty',\n  'Tone Norum',\n  'Tones And I',\n  'Toy-Box',\n  'Transplants',\n  'Travie McCoy',\n  'Van Halen',\n  'Vengaboys',\n  'Vitamin C',\n  'Wet Wet Wet',\n  'Wheatus',\n  'Wiktoria',\n  'Will Ferrell',\n  'Will Smith',\n  'Yellowcard',\n  'You Me At Six',\n  'Zach Sobiech'\n  ];\n","import {Bandagram} from \"./bandagram\";\nimport React, { useState} from \"react\";\nimport {bandNames} from \"./data/properlengthbands\";\n\nexport const Practice = () => {\n  const [answer, setAnswer] = useState(bandNames[Math.floor(Math.random() * bandNames.length)])\n  const [guesses, setGuesses] = useState<string[]>([])\n  const onMakeGuess = (guess: string) => {\n    setGuesses([...guesses, guess]);\n  };\n  const playAgain = () => {\n    setAnswer(bandNames[Math.floor(Math.random() * bandNames.length)]);\n    setGuesses([]);\n  }\n  //TODO allow user to select number of missing letters and fake letters\n  return (\n    <Bandagram\n      correctAnswer={answer}\n      initMissingLetters={2}\n      initFakeLetters={2}\n      random={Math.random}\n      guesses={guesses}\n      onMakeGuess={onMakeGuess}\n      playAgain={playAgain}\n    />\n  );\n}","//Band från quizzen på mellan 7 och 11 bokstäver\nexport const bandNames = [\n  'Ansiktet',\n  'Édith Piaf',\n  'Sheppard',\n  'Arvingarna',\n  'Eric Carmen',\n  'Peps Persson',\n  'Will Smith',\n  'Limp Bizkit',\n  'Foo Fighters',\n  'Lisa Ekdahl',\n  'Zach Sobiech',\n  'Papa Roach',\n  'Midnight Oil',\n  'Kim Carnes',\n  'Billy Paul',\n  'Coldplay',\n  'Paris Hilton',\n  'Anastacia',\n  'Eddie Murphy',\n  'Men At Work',\n  'Dolly Parton',\n  'Vance Joy',\n  'Roy Orbison',\n  'Daft Punk',\n  'Bruno Mars',\n  'Lisa Nilsson',\n  'Mötley Crüe',\n  'Hugh Grant',\n  'Rihanna',\n  'Peaches',\n  'Halestorm',\n  'Marvin Gaye',\n  'Wheatus',\n  'Paul Simon',\n  'Cornershop',\n  'The Rasmus',\n  'The Beatles',\n  'Lana Del Rey',\n  'Elov & Beny',\n  'Van Halen',\n  'Adam Lambert',\n  'Glee Cast',\n  'Günther',\n  'Iggy Azalea',\n  'Imogen Heap',\n  'Cascada',\n  'Freestyle',\n  'Doja Cat',\n  'The Knack',\n  'Paramore',\n  'Phil Collins',\n  'Chuck Berry',\n  'Neil Diamond',\n  'AWOLNATION',\n  'Eiffel 65',\n  'Dire Straits',\n  'Architects',\n  'Billy Talent',\n  'Peter LeMarc',\n  'September',\n  'Ebba Grön',\n  'Melody Club',\n  'Run–D.M.C.',\n  'Simple Plan',\n  'Cypress Hill',\n  'Roxette',\n  'The Kinks',\n  'John Lennon',\n  'Vengaboys',\n  'Iggy Pop',\n  'Survivor',\n  'Pat Benatar',\n  'Gavin DeGraw',\n  'Masked Wolf',\n  'Sabaton',\n  'Lambretta',\n  'Ice Cube',\n  'Jeff Buckley',\n  'Donna Summer',\n  'Ane Brun',\n  'LeAnn Rimes',\n  'Timbuktu',\n  'Cutting Crew',\n  'The Kooks',\n  'Green Day',\n  'Familjen',\n  'Gorillaz',\n  'Westlife',\n  'Drömhus',\n  'Docent Död',\n  'Roffe Ruff',\n  'Lil Wayne',\n  'Caramell',\n  'Cyndi Lauper',\n  'Sonny & Cher',\n  'Led Zeppelin',\n  'Iron & Wine',\n  'Rammstein',\n  'The 1975',\n  'Vitamin C',\n  'Linkin Park',\n  'Hoobastank',\n  'The Verve',\n  'Per Gessle',\n  'Afroman',\n  'Elton John',\n  'Jason Mraz',\n  'Fools Garden',\n  'Pet Shop Boys',\n  'Magnum Bonum',\n  'Lily Allen',\n  'Madonna',\n  'Maria Mena',\n  'George Ezra',\n  'Harry Styles',\n  'Young MC',\n  'Céline Dion',\n  'Tone Norum',\n  'Icona Pop',\n  'Nickelback',\n  'Adam Tensta',\n  'Will Ferrell',\n  'Jessie J',\n  'Yellowcard',\n  'Erasure',\n  'Volbeat',\n  'Kid Rock',\n  'Keala Settle',\n  'Emma Bunton',\n  'Crazy Town',\n  'Nat King Cole',\n  'Anna Book',\n  'The Darkness',\n  'Norlie & KKV',\n  '24kGoldn',\n  'B*Witched',\n  'Girls Aloud',\n  'Blondie',\n  'Juice WRLD',\n  'Guns N Roses',\n  'Eurythmics',\n  'David Bowie',\n  'Eric Saade',\n  'Frej Larsson',\n  'Flo Rida',\n  '4 Non Blondes',\n  'The Wombats',\n  'Ricky Martin',\n  'blink-182',\n  'Anti-Flag',\n  'The Jackson 5',\n  'Clara Mae',\n  'Fatboy Slim',\n  'Jimmy Cliff',\n  'Daddy Yankee',\n  'Transplants',\n  'The Animals',\n  'Soulja Boy',\n  'Meat Loaf',\n  'Barbados',\n  'Spice Girls',\n  'Lykke Li',\n  'YUNGBLUD',\n  'Irene Cara',\n  'iann dior',\n  'Mark Ronson',\n  'Bonnie Tyler',\n  'Shakira',\n  'Outkast',\n  'Nirvana',\n  'The Script',\n  'Jace Everett',\n  'Stevie Nicks',\n  'Säkert!',\n  'Metallica',\n  'Snoop Dogg',\n  'Nick Jonas',\n  'Foreigner',\n  'No Doubt',\n  'Millencolin',\n  'John Farnham',\n  'Wiktoria',\n  'Katy Perry',\n  'Gwen Stefani',\n  'Salt-N-Pepa',\n  'Die Antwoord',\n  'Kate Bush',\n  'Echosmith',\n  'Ace of Base',\n  'Travie McCoy',\n  'Disturbed',\n  'The Weeknd',\n  'Zara Larsson',\n  'You Me At Six',\n  'Wet Wet Wet',\n  'Beyoncé',\n  'Radiohead',\n  'Lasse Holm',\n  'Joe Cocker',\n  'Eldkvarn',\n  'Ed Sheeran',\n  'Caesars',\n  'Kid Cudi',\n  't.A.T.u.',\n  'Modest Mouse',\n  'The Corrs',\n  'Imperiet',\n  'The Police',\n  'Rod Stewart',\n  'Kings of Leon',\n  'Dua Lipa',\n  'Manu Chao',\n  'Haddaway',\n  'The Killers',\n  'Far & Son',\n  'Teddybears',\n  'Bastille',\n  'Ramones',\n  'Lady Gaga',\n  'Saweetie',\n  'The Pierces',\n  'Def Leppard',\n  'Kim Wilde',\n  'Smash Mouth',\n  'Fall Out Boy',\n  'The Sounds',\n  'Aerosmith',\n  'MexicoFALLZ',\n  'Måneskin',\n  'First Aid Kit',\n  '2 Unlimited',\n  'Don McLean',\n  'America',\n  'Mattafix',\n  'Bryan Adams',\n  'A*Teens',\n  'Clean Bandit',\n  'Robin Cook',\n  'Shawn Mendes',\n  'All Saints',\n  'Aaliyah',\n  'Lou Reed',\n  'Hilary Duff',\n  'Bolaget',\n  'James Blunt',\n  'Nazareth',\n  'Van Morrison',\n  'Tom Petty',\n  'Taylor Swift',\n  'Alice Cooper',\n  'Diana Ross',\n  'Tomas Ledin',\n  'Sugarcult',\n  'Del Amitri',\n  'The Kid LAROI',\n  'Aaron Carter',\n  'Tenacious D',\n  'Tom Jones',\n  'The Cure',\n  'Flobots',\n  'Faith Hill',\n  'Alessia Cara',\n  'Kanye West',\n  'Jean Stout',\n  'Beastie Boys',\n  'Lazlo Bane',\n  'Journey',\n  'The Clash',\n  'The Hives',\n  'Rick Astley',\n  'Johnny Cash',\n  'Reel Big Fish',\n  'Snow Patrol',\n  'Taylor Dayne',\n  'Luis Fonsi',\n  'Nine Days',\n  'Gary Portnoy',\n  'Molly Sandén',\n  'Quinn XCII',\n  'Bright Eyes',\n  'Billy Joel',\n  'Maskinen',\n  'Tones And I',\n  'John Denver',\n  'Patti Smith',\n  'Shebang',\n  'Hans Zimmer',\n  'Scorpions',\n  'Owl City',\n  'Sex Pistols',\n  'Take That',\n  'Friends',\n  'Tina Turner',\n  'Miley Cyrus',\n  'In Flames',\n  'Bon Jovi',\n  'Madness',\n  'Bee Gees',\n  'Nicki Minaj',\n  'Eric Clapton',\n  'Bad Religion',\n  'Ryan Adams',\n  'Iron Maiden',\n  'Shania Twain',\n  'The Coral',\n  'Suzanne Vega',\n  'Don Omar',\n  'Jan Johansen',\n  'Marc Cohn',\n  'Toy-Box',\n];\n","import {Bandagram} from \"./bandagram\";\nimport React, {useMemo, useState} from \"react\";\nimport {bandNames} from \"./data/dailyquiz\";\nimport {mulberry32} from \"./data/mulberryrandom\";\nimport Cookies from \"universal-cookie\";\nimport {DailyState} from \"./cookie/cookie\";\nimport {dayNumber} from \"./dayNumber\";\n\nexport const DailyQuiz = () => {\n  const {correctAnswer, random} = useMemo(() => {\n    return answerOfTheDay();\n  }, []);\n  const cookies = new Cookies('dailyState', { path: '/' });\n  const [blob, setBlob] = useState(true);\n  const guesses = guessesOfTheDay(cookies);\n  const onMakeGuess = (guess: string) => {\n    cookies.set('dailyState', {...cookies.get('dailyState'), guesses: [...guesses, guess]}, {path: '/'});\n    setBlob(!blob);\n  }\n  return (\n    <>\n      <h1>Bandagram #{dayNumber()}</h1>\n      <Bandagram\n        correctAnswer={correctAnswer}\n        initMissingLetters={2}\n        initFakeLetters={2}\n        random={random}\n        guesses={guesses}\n        onMakeGuess={onMakeGuess}\n      />\n    </>\n  );\n}\n\nfunction answerOfTheDay() {\n  const index = dayNumber() % bandNames.length;\n  const random = mulberry32(index);\n  return {correctAnswer: bandNames[index], random};\n}\n\nfunction guessesOfTheDay(cookies: Cookies) {\n  const cookie: DailyState = cookies.get('dailyState');\n  const today = (new Date()).toDateString();\n  if (cookie?.date === today) {\n    return cookie.guesses;\n  } else {\n    cookies.set('dailyState', {date: today, guesses: []}, {path: '/'});\n    return [];\n  }\n}","/**\n * Stolen from https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n * @param a Seed\n */\nexport function mulberry32(a: number) {\n  return function() {\n    let t = a += 0x6D2B79F5;\n    t = Math.imul(t ^ (t >>> 15), t | 1);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n  }\n}","import './App.css';\nimport React from 'react';\nimport {Tab, Tabs} from \"@mui/material\";\nimport styled from \"@emotion/styled\";\nimport {Practice} from \"./bandagram/Practice\";\nimport {DailyQuiz} from \"./bandagram/DailyQuiz\";\n\nconst CenterPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nenum TabsEnum {\n  DailyQuiz = 'DailyQuiz',\n  Practice = 'Practice'\n}\n//TODO välj mellan träna och daily quiz\nfunction App() {\n  const [value, setValue] = React.useState(TabsEnum.DailyQuiz);\n\n  return (\n    <CenterPage className=\"App\">\n\n      <Tabs value={value}>\n        <Tab label=\"BANDAGRAM\" value={TabsEnum.DailyQuiz} onClick={() => setValue(TabsEnum.DailyQuiz)}/>\n        <Tab label=\"Practice\" value={TabsEnum.Practice} onClick={() => setValue(TabsEnum.Practice)}/>\n      </Tabs>\n      {value === TabsEnum.Practice &&\n\n        <Practice />\n      }\n      {value === TabsEnum.DailyQuiz &&\n        <DailyQuiz />\n      }\n\n    </CenterPage>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}